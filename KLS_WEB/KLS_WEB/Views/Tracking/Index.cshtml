@model KLS_WEB.Models.Tracking.TrackingDTO

<style>
    .card {
        box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 20%) !important;
    }

    .filter-option-inner-inner {
        text-transform: uppercase !important;
        font-size: 12px !important;
    }

    td {
        font-size: 12px !important;
    }

    p {
        margin-bottom: 0 !important;
    }

    .custom-filter {
        cursor: pointer;
    }
</style>

<div class="p-3">
    <div class="d-flex flex-row justify-content-between mb-2">
        <div class="w-25 my-auto">
            <h3>MONITOREO</h3>
        </div>
        <div class="w-75 d-flex flex-row justify-content-end">
            <div class="card text-center w-25 mr-3 custom-filter" onclick="DT()">
                <div class="card-body size-12">
                    <b>@Model.Todos</b>
                    <p class="text-light-grey">TODOS</p>
                </div>
            </div>
            <div class="card text-center w-25 mr-3 custom-filter" onclick="DT(null, 'status', true, 2)">
                <div class="card-body size-12">
                    <b>@Model.Confirmados</b>
                    <p class="text-light-grey">CONFIRMADOS</p>
                </div>
            </div>
            <div class="card text-center w-25 mr-3 custom-filter" onclick="DT(null, 'status', true, 3)">
                <div class="card-body size-12">
                    <b>@Model.EnTransito</b>
                    <p class="text-light-grey">EN TRÁNSITO</p>
                </div>
            </div>
            <div class="card text-center w-25 custom-filter" onclick="DT(null, 'substatus', true, 9)">
                <div class="card-body size-12">
                    <b>@Model.Demorados</b>
                    <p class="text-light-grey">DEMORADOS</p>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-3">
                    <label class="form-label size-14">CLIENTE</label>
                    <select asp-items="Model.Selects.Customers" multiple="multiple" name="customers[]" class="form-select" onchange="DT(null, this)" style="width: 100%;" data-selected-text-format="count" data-live-search="true"></select>
                </div>
                <div class="col-3">
                    <label class="form-label size-14">ESTATUS</label>
                    <select asp-items="Model.Selects.Statuses" class="form-select" onchange="DT(null, 'status', true, this.value), GetSubstatuses(this.value)" style="width: 100%;" data-live-search="true"></select>
                </div>
                <div class="col-3">
                    <label class="form-label size-14">SUBESTATUS</label>
                    <select id="substatuses" class="form-select" onchange="DT(null, 'substatus', true, this.value)" style="width: 100%;" data-live-search="true"></select>
                </div>
                <div class="col-3 my-auto">
                    <input type="text" class="form-control" onkeyup="DT(this.value)" placeholder="BUSCAR">
                </div>
                @*<div class="col-1 my-auto">
                        <a class="btn btn-sm btn-secondary float-right" href="#">
                            <span class="material-icons" onclick="descargarExcel();">
                                file_download
                            </span>
                        </a>
                    </div>*@
            </div>
            <table id="table" class="table table-striped table-bordered display table-hover table-viajes text-uppercase" width="100%">
                <thead style="display: none;">
                    <tr>
                        @*<th>ID Viaje</th>*@
                        <th>Cliente</th>
                        <th>Origen</th>
                        <th>Fecha</th>
                        <th>Contacto</th>
                        <th>Estatus</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<div class="modal fade" id="comentarioModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">AGREGAR COMENTARIO MONITOREO</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form onsubmit="event.preventDefault(), PostSectionComment(this)">
                    <input type="hidden" name="SectionId" />
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label size-14">ESTATUS</label>
                            <select asp-items="Model.Selects.Statuses" name="statusid" class="form-select" onchange="GetSubstatuses(this.value, true)" style="width: 100%;" data-live-search="true"></select>
                        </div>
                        <div class="col-6">
                            <label class="form-label size-14">SUBESTATUS</label>
                            <select name="substatusid" class="form-select" style="width: 100%;" data-live-search="true"></select>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-12">
                            <label>COMENTARIO</label>
                            <textarea class="form-control text-uppercase" rows="6" name="comment" required></textarea>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <label>GRUPO MONITOR</label>
                            <input class="form-control text-uppercase" name="grupomonitor" />
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-12">
                            <label>EVIDENCIA</label>
                            <input type="file" class="form-control" name="file" accept=".jpg,.png" />
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-6">
                            <button type="submit" class="btn btn-dark" style="width:100%;">GUARDAR</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal detalle -->
<div class="modal fade" id="sectiondetail" tabindex="-1" aria-labelledby="sectiondetailLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sectiondetailLabel">VIAJE</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row mb-3">
                        <label class="col-3 col-form-label size-12 text-uppercase">Transportista</label>
                        <div class="col-9">
                            <input type="text" class="form-control" id="transportista" disabled>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-3 col-form-label size-12 text-uppercase">Conductor</label>
                        <div class="col-9">
                            <input type="text" class="form-control" id="conductor" disabled>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-3 col-form-label size-12 text-uppercase">Origen</label>
                        <div class="col-9">
                            <input type="text" class="form-control" id="origen" disabled>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-3 col-form-label size-12 text-uppercase">Destino</label>
                        <div class="col-9">
                            <input type="text" class="form-control" id="destino" disabled>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-3 col-form-label size-12 text-uppercase">Teléfono</label>
                        <div class="col-9">
                            <input type="text" class="form-control" id="telefono" disabled>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-3 col-form-label size-12 text-uppercase">Tipo de unidad</label>
                        <div class="col-9">
                            <input type="text" class="form-control" id="tipodeunidad" disabled>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@*Checkpoints*@
<div class="modal fade" id="checkpointModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">CHECKPOINTS</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <table id="table" class="table table-striped table-bordered display table-hover table-monitoreo" width="100%">
                            <thead>
                                <tr>
                                    <th>CHECKPOINT</th>
                                    <th>HORA ORIGINAL</th>
                                    <th>HORA ESPERADA</th>
                                    <th>HORA REAL</th>
                                    <th>USUARIO</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="table-checkpoint-info">
                                <tr>
                                    <td colspan="8">Cargando....</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@*Checkpoints*@

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
    <!-- Latest compiled and minified JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <!-- (Optional) Latest compiled and minified JavaScript translation files -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/i18n/defaults-es_ES.min.js"></script>
    <script src="@Url.Content("~/js/sheetjs/fileSaver.min.js")"></script>
    <script src="@Url.Content("~/js/sheetjs/xlsx.full.min.js")"></script>

    <script>
        $(() => {
            $('select').selectpicker();
            DT();
        })

        const GetSubstatuses = async (StatusId, isComment = false) => {
            try {
                const response = await fetch(`/Tracking/GetSubstatuses?StatusId=${StatusId}`);
                const data = await response.json();
                let html = '<option value="0" selected disabled>NO HAY SELECCIÓN</option>';
                data.map(({ id, name }) => html += `<option value="${id}">${name}</option>`);
                $(`${isComment ? "[name=substatusid]" : "#substatuses"}`).html(html).selectpicker('refresh');
            } catch (e) {
                console.error(e);
            }
        }

        const PostSectionComment = async e => {
            const params = {
                method: 'POST',
                body: new FormData(e)
            };

            try {
                const response = await fetch('/Tracking/AddSectionComment', params);
                const data = await response.json();
                if (data) {
                    $(e)[0].reset();
                    Table.draw();
                    $('#comentarioModal').modal('hide');
                }
            } catch (e) {
                console.error(e);
            }
        }

        function descargarExcel() {
            dataMonitoreo = [];
            $.get("/Monitoring/getMonitoring", function (res) {
                $("#table-info").empty();
                dataMonitoreo = res;
            });

            console.log(dataMonitoreo);
            return;
            var _fileName = "REPORTE.xlsx";
            var _sheetName = "REPORTE";
            var wb = XLSX.utils.book_new();
            wb.Props = {
                Title: "REPORTE ",
                Subject: "Excel",
                Author: "KLS",
                CreatedDate: new Date(2021, 08, 11)
            };
            wb.SheetNames.push(_sheetName);
            var ws_data = dataMonitoreo;
            var ws = XLSX.utils.json_to_sheet(ws_data);
            wb.Sheets[_sheetName] = ws;
            var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), _fileName);
        }

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer
            var view = new Uint8Array(buf);  //create uint8array as viewer
            for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet
            return buf;
        }

        const GetDetails = async SectionId => {
            try {
                const response = await fetch(`/Tracking/GetDetails?SectionId=${SectionId}`);
                const data = await response.json();
                const { transportista, conductor, origen, destino, tipoDeUnidad, telefono } = data;
                $('#transportista').val(transportista);
                $('#conductor').val(conductor);
                $('#origen').val(origen);
                $('#destino').val(destino);
                $('#telefono').val(telefono);
                $('#tipodeunidad').val(tipoDeUnidad);
                $('#sectiondetail').modal('show');
            } catch (e) {
                console.error(e);
            }
        }

        const DT = (keyword = null, filter = null, customsearch = false, status = 0) => {
            Table = $('#table').DataTable({
                destroy: true,
                responsive: true,
                autoWidth: true,
                processing: true,
                serverSide: true,
                iDisplayLength: 100,
                dom: 'Btp',
                ajax: {
                    type: 'POST',
                    url: '/Tracking/DataTable',
                    data: data => {
                        if (keyword) {
                            data.search.value = keyword;
                        }
                        if (filter && !customsearch) {
                            data.filter = $(filter).val();
                        }
                        if (customsearch && status == 0) {
                            data.customsearch = customsearch;
                            data.SubstatusId = filter;
                        }
                        if (filter && customsearch) {
                            data.customsearch = customsearch;
                            data.SubstatusId = status;
                            data.CSType = filter;
                        }
                    }
                },
                'createdRow': (row, data, index) => {
                    const { sectionId } = data;
                    $('td', row).eq(3).attr('id', `timer${sectionId}`).html('PROCESANDO');
                },
                columns: [
                    {
                        render: (data, type, row) => {
                            const { sectionId, folio, cliente } = row;
                            const html = `<p>FOLIO: <a href="javascript:void(0)" onclick="GetDetails(${sectionId})">${folio}</a></p><p>CLIENTE: ${cliente}</p>`;
                            return html;
                        }
                    },
                    {
                        render: (data, type, row) => {
                            const { origen, destino } = row;
                            const html = `<p>ORIGEN: ${origen}</p><p>DESTINO: ${destino}</p>`;
                            return html;
                        }
                    },
                    {
                        render: (data, type, row) => {
                            const { fechaSalida, fechaLlegada } = row;
                            const html = `<p>FECHA SALIDA: ${fechaSalida}</p><p>FECHA LLEGADA: ${fechaLlegada}</p>`;
                            return html;
                        }
                    },
                    {
                        render: (data, type, row) => {
                            const { siguienteContacto, eta, grupoMonitor, sectionId, } = row;

                            const countDownDate = new Date(siguienteContacto).getTime();

                            let countdown = setInterval(() => {
                                const now = new Date().getTime();
                                const distance = countDownDate - now;
                                const isDelayed = distance < 0;

                                const days = Math.floor(distance / (1000 * 60 * 60 * 24)).toString().padStart(2, '0').replace('-', '');
                                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)).toString().padStart(2, '0').replace('-', '');
                                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)).toString().padStart(2, '0').replace('-', '');
                                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                                const countDown = `${isDelayed ? 'DEMORADO:' : ''} ${days}d ${hours}:${minutes}:${seconds.toString().padStart(2, '0').replace('-', '')}`;
                                const html = `<p>SIGUIENTE CONTACTO EN:<br> <b ${isDelayed ? 'class="text-danger"' : ''}>${countDown}</b></p><p>ETA: ${eta}</p> <p>GRUPO MONITOR: ${grupoMonitor}</p>`;
                                $(`#timer${sectionId}`).empty().html(html);
                            }, 1000);

                            return countdown;
                        }
                    },
                    {
                        render: (data, type, row) => {
                            const { sectionId, travelId, status } = row;
                            return `<a href="/Travels/AddEdit/${travelId}/${sectionId}">${status}</a>`;
                        }
                    },
                    {
                        render: (data, type, row) => {
                            const { hasCheckpoints, sectionId, checkpoint, rutaId, fechaSalida } = row;
                            let html = `<a href="javascript:void(0)" onclick="$('#comentarioModal').modal('show'), $('[name=SectionId]').val(${sectionId})"><span class="material-icons">control_point</span></a>`;
                            html += hasCheckpoints ? `<a href="javascript:void(0)" class="d-flex flex-column text-danger" onclick="verCheckpoint(${sectionId},${rutaId},'${fechaSalida}');"><span class="material-icons">assistant_photo</span>${checkpoint}</a> ` : '';
                            return html;
                        }
                    }
                ],
                language: {
                    url: '/json/dt-es.json'
                },
                columnDefs: [
                    { className: 'd-flex flex-row justify-content-around align-items-center', targets: [5] }
                ],
                initComplete: () => {
                    $('#table_length').html(`<a href="/Travels/AddEdit/0/0" class="btn btn-sm btn-outline-secondary float-right"><span class="material-icons">add</span></a>`).show();
                }
            });
        }

        function verCheckpoint(idviaje, idruta, fechasalida) {
            console.log(fechasalida);
            var catCheckpoints = [];
            var catSecChecpoints = [];
            var horaOriginal = 0;
            var horaOriginal1 = 0;
            var fechaSalidaView = ``;

            //Dos variables para la validacion de fechas de hora esperada
            var horaEsperadaView = ``; //La hora esperada que se mostrara en la tabla
            var horaEsperadaView1 = ``; //La hora esperada que se mostrara en la tabla
            var banderaHoraEsperada = 0;
            //Inicio checpoints
            $.get("/Monitoring/getCheckpoints/" + idruta, function (res) {
                catCheckpoints = res;
                //Obtener los checkpoints de las secciones
                $.get("/Monitoring/getSCheckpoints/" + idviaje, function (resCheck) { //Seccion
                    catSecChecpoints = resCheck;
                    $("#table-checkpoint-info").empty();//Vaciar la tabla de registros de checkpoints
                    var trInfo = `<tr>`;
                    var i = 0;
                    var colorCheck = "green";
                    //Recorrer catalogo catSecChecpoints
                    $.each(catCheckpoints, function (item, key) {
                        i++;
                        horaOriginal = horaOriginal + key.tiempo;
                        horaOriginal1 = horaOriginal1 + key.tiempo;

                        fechaSalidaView = moment(fechasalida).add(horaOriginal, 'hours').format('YYYY-MM-DD hh:mm:ss'); //Siempre va
                        var hReal, createdBy, btnActive, hEsperada = ``;
                        let indice = catSecChecpoints.findIndex(service => service.idCheckpoint == key.id);

                        if (indice >= 0) {
                            banderaHoraEsperada = 1;
                            //Aqui ya tenemos una hora real
                            hReal = `<td>${moment(catSecChecpoints[indice].horaReal).format('YYYY-MM-DD hh:mm:ss')}</td>`;
                            createdBy = `<td>${catSecChecpoints[indice].createdBy}</td>`;
                            btnActive = `<td><button class="btn btn-sm" disabled="disabled"><span class="material-icons">save</span></button></td>`;
                            horaOriginal1 = 0;
                            horaEsperadaView = catSecChecpoints[indice].horaReal;
                        } else {
                            hReal = `<td><input type="datetime-local" class="form-control form-control-sm" id="horaReal-${idviaje}"></td>`;
                            createdBy = `<td></td>`;
                            btnActive = `<td>
                                                <button class="btn btn-sm" onclick="saveCheckpoint(${idviaje},${key.id},${idruta},'${fechasalida}');">
                                                    <span class="material-icons">save</span>
                                                </button>
                                            </td>`;
                        }

                        if (parseInt(i) <= 1) {
                            hEsperada = `<td>${moment(fechasalida).add(horaOriginal, 'hours').format('YYYY-MM-DD hh:mm:ss')}</td>`;
                        } else {
                            if (banderaHoraEsperada == 0) {
                                hEsperada = `<td>${moment(fechasalida).add(horaOriginal1, 'hours').format('YYYY-MM-DD hh:mm:ss')}</td>`;
                            } else {
                                if (horaOriginal1 == 0) {
                                    let horadif = moment(horaEsperadaView1).diff(fechaSalidaView, 'minutes');
                                    horadif = horadif * 1;

                                    //if (horadif >= 1) {
                                    //    colorCheck = "red";
                                    //}

                                    let fecha = moment(fechaSalidaView).add(horadif, 'minutes').format('YYYY-MM-DD hh:mm:ss');
                                    let horaEsp = moment(fecha).add(key.tiempo, 'hours').format('YYYY-MM-DD hh:mm:ss');
                                    console.log(moment(fechaSalidaView).isAfter(horaEsp));
                                    //if (moment(fechaSalidaView).diff(horaEsp) > 1) {
                                    //    colorCheck = "red";
                                    //}
                                    if (moment(horaEsp).isAfter(fechaSalidaView)) {
                                        colorCheck = "red";
                                    }
                                    hEsperada = `<td>${horaEsp}</td>`;
                                } else {
                                    let horadif = moment(horaEsperadaView).diff(fechaSalidaView, 'minutes');
                                    horadif = horadif * 1;

                                    //if (horadif >= 1) {
                                    //    colorCheck = "red";
                                    //}

                                    let fecha = moment(fechaSalidaView).add(horadif, 'minutes').format('YYYY-MM-DD hh:mm:ss')
                                    let horaEsp = moment(fecha).add(horaOriginal1, 'hours').format('YYYY-MM-DD hh:mm:ss');

                                    //if (moment(fechaSalidaView).diff(horaEsp) > 1) {
                                    //    colorCheck = "red";
                                    //}
                                    if (moment(horaEsp).isAfter(fechaSalidaView)) {
                                        colorCheck = "red";
                                    }

                                    hEsperada = `<td>${horaEsp}</td>`;
                                }
                            }
                        }

                        trInfo += `<td> <div style="height:10px;width:10px;background:${colorCheck};-moz-border-radius:50px;-webkit-border-radius:50px;border-radius:50px;display: inline-block;"></div> ${key.checkpoint}</td>`;
                        trInfo += `<td>${fechaSalidaView}</td>`;
                        trInfo += hEsperada + hReal + createdBy + btnActive + `</tr>`;

                        //Fin pintar tabla
                        if (indice >= 0) {
                            horaEsperadaView1 = catSecChecpoints[indice].horaReal;
                        }

                    });
                    $("#table-checkpoint-info").append(trInfo);
                    //Fin recorrer catalogo catSecChecpoints
                });
                //Obtener los checkpoints de las secciones
            });
            //Fin checkpoints
            $("#checkpointModal").modal("show");
        }
    </script>
}