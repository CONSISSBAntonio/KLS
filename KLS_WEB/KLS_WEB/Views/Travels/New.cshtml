@model KLS_WEB.Models.Travels.MainTravelDTO

<style>
    .card, .cshadow {
        box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 20%) !important;
    }
</style>

<div class="p-4">
    <div class="d-flex justify-content-between mb-3">
        <div class="d-flex">
            <a href="/@(Model.Type.Contains("demand") ? "Demand" : Model.Type.Contains("offer") ? "Offer" : "Travels")" class="my-auto">
                <div class="material-icons icon-red">arrow_back</div>
            </a>
            <div class="text-uppercase poppins medium size-24 pl-2">Nuevo viaje</div>
        </div>
    </div>
</div>

<div class="row pr-3 pl-5">
    <div class="col-6">
        <div class="d-flex justify-content-around">
            <div class="my-auto">
                @{string id = Model.MainTravel.Id == 0 ? "0001" : (Model.MainTravel.Id).ToString("D4"); }
                <h4 class="text-secondary size-14" id="folio">VT@(string.Concat(DateTime.Now.ToString("yyMM"), id))</h4>
            </div>
            <div class="card text-center">
                <div class="card-body pb-0 size-12">
                    <b>$00.00 MXN</b>
                    <p class="text-light-grey">COSTO</p>
                </div>
            </div>
            <div class="card text-center">
                <div class="card-body pb-0 size-12">
                    <b>$00.00 MXN</b>
                    <p class="text-light-grey">VENTA</p>
                </div>
            </div>
            <div class="card text-center">

                <div class="card-body pb-0 size-12">
                    <b>$00.00 MXN</b>
                    <p class="text-light-grey">VACIOS</p>
                </div>
            </div>
        </div>
        <div class="card mt-3" style="height: 14.7rem;">
            <form asp-controller="Travels" asp-action="SetMainTravel" method="post">
                <div class="row">
                    <div class="col-6 pl-4 pt-3">
                        <label asp-for="MainTravel.ServiceId" class="form-label">TIPO DE SERVICIO</label>
                        <select asp-for="MainTravel.ServiceId" asp-items="Model.Servicios" class="form-select" style="width: 100%" required></select>
                        <span asp-validation-for="MainTravel.ServiceId" class="text-danger"></span>
                    </div>
                    <div class="col-6 pt-3 pr-4">
                        <label asp-for="MainTravel.Ejecutivo" class="form-label">EJECUTIVO</label>
                        <input asp-for="MainTravel.Ejecutivo" type="text" class="form-control form-control-sm">
                    </div>
                    <div class="col-6 pl-4 pt-3 pb-4">
                        <label asp-for="MainTravel.GrupoMonitor" class="form-label">GRUPO MONITOR</label>
                        <input asp-for="MainTravel.GrupoMonitor" type="text" class="form-control form-control-sm">
                    </div>
                </div>
                @if (Model.MainTravel.Id == 0)
                {
                    <div class="pb-3 pl-2">
                        <button type="submit" id="guardar" class="btn btn-dark" style="width: 12.8rem;">GUARDAR</button>
                    </div>
                }
            </form>
        </div>
    </div>

    <div class="col-6 pr-5">
        <div class="d-flex justify-content-between mb-2" style="height: 3rem;">
            <b class="my-auto size-12">ADMINISTRACIÓN DE TRAMOS</b>
            @if (Model.MainTravel.Id > 0)
            {
                <button class="btn btn-dark cshadow" onclick="AddEditTramo(this, 0)"><span class="material-icons">add</span></button>
            }
        </div>
        <div>
            <table class="table table-striped table-bordered display table-hover text-uppercase table-facturas" width="100%" style="height: 17rem;">
                <thead>
                    <tr>
                        <th>TRAMO</th>
                        <th>COSTO</th>
                        <th>VENTA</th>
                        <th>CLIENTE</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.MainTravel.Travels.Any())
                    {
                        foreach (var tramo in Model.MainTravel.Travels)
                        {
                            <tr>
                                <td onclick="AddEditTramo(this, @tramo.Id)" style="text-decoration: underline; cursor:pointer;">@tramo.Folio</td>
                                <td>@tramo.Costototal</td>
                                <td>@tramo.precioClienteTotal</td>
                                <td>@tramo.NombreCliente</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="text-center" colspan="4">AGREGA UN TRAMO PARA COMENZAR</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div id="tramocontainer" class="card mx-5 mb-5">

</div>

<!--Modal global-->
<div class="modal fade" id="modalDiv" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false"
     aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titulo-modal">AGREGAR</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-left">
                <form id="frmServicios" class="viaje" onsubmit="event.preventDefault();">
                    <div class="form-check d-flex align-items-center">
                        <input class="form-check-input my-auto" type="checkbox" id="0" name="terrestrenacional">
                        <label class="form-check-label" for="0">Terrestre nacional</label>
                    </div>
                    @*<div class="form-check">
                            <input class="form-check-input" type="checkbox" id="1" name="naviera">
                            <label class="form-check-label" for="1">
                                Naviera
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="2" name="agenteaduanal">
                            <label class="form-check-label" for="2">
                                Agente aduanal
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="3"
                                   name="terrestreinternacional">
                            <label class="form-check-label" for="3">
                                Terrestre Internacional
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="4" name="aerolinea">
                            <label class="form-check-label" for="4">
                                Aerolinea
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="5" name="coloaders">
                            <label class="form-check-label" for="5">
                                Coloaders
                            </label>
                        </div>*@
                </form>
                <br />
                <button id="btnaddservices" onclick="closeModal('agregarServicios');" class="btn btn-dark" style="width:100%;">
                    Agregar
                </button>

            </div>
        </div>
    </div>
</div>

<!--Modal AGREGAR ORIGEN-DESTINO-->
<div class="modal fade" id="modalOD" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titulo-modal"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-left">
                <form id="frmOD" action="#" method="post">
                    <input type="hidden" name="id" id="idEditar" value="0" />
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Nombre</label>
                                <input type="text" class="form-control" name="Nombre" id="Nombre" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">CP</label>
                                <input type="number" class="form-control" name="Cp" id="Cp" required />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Estado</label>
                                <select class="form-control form-control-sm" style="width:100%;" name="Id_Estado" id="Id_Estado" onchange="setCiudad(this.value);">
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Ciudad</label>
                                <select class="form-control form-control-sm" style="width:100%;" name="Id_Ciudad" id="Id_Ciudad" onchange="setColonias(this.value);">
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Colonia</label>
                                <select class="form-control form-control-sm" style="width:100%;" name="Id_Colonia" id="Id_Colonia" onchange="setCp(this.value);">
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="">Dirección</label>
                                <input type="text" class="form-control" name="Direccion" id="Direccion" required />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Hora de atención</label>
                                <input type="time" class="form-control" name="HoraAtencion" id="HoraAtencion" required />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="">Estatus</label>
                            <select class="form-control form-control-sm" name="Estatus" id="Estatus">
                                <option value="1">Activo</option>
                                <option value="2">Inactivo</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-dark guardar" style="width:22%;" id="btnAccion">
                        Guardar
                    </button>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Cerrar</button>
                @*<button type="button" class="btn btn-primary">Save changes</button>*@
            </div>
        </div>
    </div>
</div>
<!--Modal AGREGAR ORIGEN-DESTINO-->
<!-- modal confirm delete-->
<div class="modal fade" id="popup" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titulo-modal"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-left">
                <p>¿Estas seguro de que deseas eliminar el SERVICIO seleccionado?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Cerrar</button>
                <button id="confirm" type="button" class="btn">Si</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>

        let _TramoId = 0 ;
        let _OriginId = 0 ;
        let _DestinationId = 0 ;
        let _EnlaceEspejo = '';
        let _UsuarioEspejo = '';
        let _PassEspejo = '';

        let MainTravelId = @Model.MainTravel.Id ;
        const TramoId = '@Model.TravelDTO.Id';
        //old
        let dataCity = [];
        let catPais = [];
        let catEstado = [];
        let catCiudad = [];
        let ClientId = @Model.TravelDTO.IdCliente ;
        const OriginId = @Model.TravelDTO.IdOrigen ;
        const DesitnationId = @Model.TravelDTO.IdDestino ;
        const RouteId = @Model.TravelDTO.IdRuta ;
        const UnitId = @Model.TravelDTO.IdUnidad ;
        @*const isDemand = @(Model.IsDemand ? "true" : "false");
        const isOffer = @(Model.IsOffer ? "true" : "false");*@
        //const CarrierId = Model.Transportista ;
        let dataOrigenes = [];
        let dataState = [];
        let dataColonies = [];

        $(() => {
            loadState();
            loadCountry();
            loadUnits();
            initSelects();
            getCatalogos();
            dSelect('tipoviaje');
            dSelect('Id_Estado');
            dSelect('Id_Ciudad');
            dSelect('Id_Colonia');
            //isDemand && CarrierId != 0 && SetServicesFromDemand();


            $("#frmOD").submit(function (event) {
                event.preventDefault();
                const type = $(this).attr('rel') == 'destino' ? 'Destinations/setDestino' : 'Origins/setOrigen';
                var jsonData = convertJson($("#frmOD"));
                jsonData["Id_Cliente"] = $('#cliente').val();
                if (parseInt($("#Id_Ciudad").val()) != 0 && parseInt($("#Id_Estado").val()) != 0 && parseInt($("#Id_Colonia").val()) != 0) {
                    $.post(`/Clients/${type}`, jsonData, function (res) {
                        dToast("success", "Registro guardado exitosamente.", "Registrado");
                        $(".guardar").attr("disabled", false);
                        $('select').map((k, e) => $(e).val('0').trigger('change'));
                        $('#frmOD').trigger("reset");
                        $('#cliente').val(jsonData["Id_Cliente"]).trigger('change');
                    }).fail(function (error) {
                        dToast("error", "Error al tratar de guardar el registro", "Error");
                        $(".guardar").attr("disabled", false);
                    });
                } else {
                    dToast("error", "Selecciona una opción", "Error");
                }
            });
        });

        const AddEditTramo = async (e, TramoId) => {
            $(e).prop('disabled', true);
            try {
                const response = await fetch(`/Travels/GetTramo/${TramoId}`);
                const data = await response.text();
                $('#tramocontainer').html(data);
            } catch (e) {
                console.error(e);
            }
            $(e).prop('disabled', false);
        }

        //OLD FUNCTIONS

        //Catalogos
        function getCatalogos() {
            $.get("/Catalogs/Geography/State/getState", function (res) {
                dataState = res;
                $("#Id_Estado").empty();
                $("#Id_Estado").append(`<option value="0" selected disabled>Selecciona una opción</option>`);
                $.each(dataState, function (item, key) {
                    if (parseInt(key.estatus) == 1) {
                        $("#Id_Estado").append(`<option value="${key.id}">${key.nombre}</option>`);
                    };
                });
            }).fail(function (error) {
                dToast("error", "Error al tratar de obtener los registros, intenta cerrar sesión y volver a iniciar.", "Error");
            });

            $.get("/Catalogs/Geography/City/getCity", function (res) {
                dataCity = res;
            }).fail(function (error) {
                dToast("error", "Error al tratar de obtener los registros, intenta cerrar sesión y volver a iniciar.", "Error");
            });

            $.get("/Catalogs/Geography/Colonies/getColonies", function (res) {
                dataColonies = res;
            }).fail(function (error) {
                dToast("error", "Error al tratar de obtener los registros, intenta cerrar sesión y volver a iniciar.", "Error");
            });
        }

        function searcCP() {
            var codigoP = $("#Cp").val();
            $.each(dataColonies, function (item, key) {
                if (parseInt(key.estatus) == 1 && parseInt(key.cp) == parseInt(codigoP)) {
                    $('#Id_Estado option[value="' + key.id_estado + '"]').attr("selected", true);
                    setCiudad(key.id_estado);
                    $("#Id_Estado").change();
                    $('#Id_Ciudad option[value="' + key.id_ciudad + '"]').attr("selected", true);
                    $("#Id_Ciudad").change();
                    setColonias(key.id_ciudad);
                    $("#Id_Colonia").change();
                };
            });

        }

        function setCp(id) {
            let indice = dataColonies.findIndex(service => service.id == id);
            if (parseInt(id) != 0) {
                if (parseInt(indice) >= 0) {
                    $("#Cp").val(dataColonies[indice].cp);
                } else {
                    $("#Cp").val("");
                    dToast("info", "No se encontro ninguna colonia", "Atención");
                }
            }
        }

        function setColonias(id, idselect = 0) {
            $("#Id_Colonia").empty();
            $("#Id_Colonia").append(`<option value="0">Selecciona una opción</option>`);
            $.get("/Clients/Origins/getColonias/" + id, function (res) {
                dataColonies = res;
                $.each(res, function (item, key) {
                    if (parseInt(key.estatus) == 1) {
                        $("#Id_Colonia").append(`<option value="${key.id}">${key.nombre}</option>`);
                    };
                });
                if (idselect != 0) {
                    $("#Id_Colonia").val(idselect).trigger('change');
                }
            });
        }
        function setCiudad(id) {
            $("#Id_Ciudad").empty();
            $("#Id_Ciudad").append(`<option value="0">Selecciona una opción</option>`);
            $.each(dataCity, function (item, key) {
                if (parseInt(id) == parseInt(key.id_estado)) {
                    $("#Id_Ciudad").append(`<option value="${key.id}">${key.nombre}</option>`);
                };
            });
        }

        const getRoute = () => {
            const origenid = $('#origen').val();
            const destinoid = $('#destino').val();
            origenid != null && destinoid != null && (
                $("#ruta").empty().append(`<option value="0" selected disabled>Selecciona una opción</option>`),
                $.post('/Travels/GetRuta', { origenid: origenid, destinoid: destinoid }, response => {
                    response && response.length > 0 ? response.map(({ id, od }) => $('#ruta').append(`<option value="${id}" selected>${od}</option>`)
                    ) : ($("#ruta").empty().append(`<option value="0" selected disabled>No se encontraron rutas</option>`));
                })
            )
            dSelect('ruta');
        }

        const GetAddress = (id, type) => {
            type === 'origen' ? (
                $.get(`/Clients/Origins/GetOrigin/${id}`, response => {
                    if (!response) {
                        return;
                    }

                    const { direccion } = response;
                    direccion && $('#direccionremitente').val(direccion);
                })
            ) : (
                $.get(`/Clients/Destinations/GetDestination/${id}`, response => {
                    if (!response) {
                        return;
                    }
                    const { direccion } = response;
                    $('#direcciondestinatario').val(direccion);
                })
            );
        }

        const getClientParams = Id => {
            ClientId = Id;
            if (ClientId != 0) {
                $.get("/Clients/Origins/getOrigen/", { "Id_Cliente": ClientId }, response => {
                    $(`#origen`).empty().append(`<option value="0" disabled selected>SELECCIONA</option>`);
                    response.length ? (response.map(({ id, estatus, nombre }) => {
                        estatus == 1 && $(`#origen`).append(`<option value="${id}">${nombre}</option>`);
                    })) : (dToast("warning", "El cliente seleccionado no tiene orígenes.", "Atencion!"));

                    dSelect(`origen`);
                }).fail(error => {
                    console.error(error);
                    dToast("error", "Error al obtener los origenes del cliente", "Atencion!");
                });

                $.get("/Clients/Destinations/getDestino/", { "Id_Cliente": ClientId }, response => {
                    $(`#destino`).empty().append(`<option value="0" disabled selected>SELECCIONA</option>`);
                    response.length ? (response.map(({ id, estatus, nombre }) => {
                        estatus == 1 && $(`#destino`).append(`<option value="${id}">${nombre}</option>`);
                    })) : (dToast("warning", "El cliente seleccionado no tiene destinos.", "Atencion!"));

                    dSelect(`destino`);
                }).fail(error => {
                    console.error(error);
                    dToast("error", "Error al obtener los destinos del cliente", "Atencion!");
                });

                $.get(`/Clients/Others/getOtros/`, { Id_Cliente: ClientId }, response => {
                    if (!response) {
                        return;
                    }

                    const {
                        referencia1,
                        referencia2,
                        referencia3,
                        treferencia1,
                        treferencia2,
                        treferencia3
                    } = response;
                    let referencias = ``;
                    referencias += referencia1 && treferencia1 != null ? `<div class="form-group col-4" ><label class="col-form-label col-form-label-sm">${treferencia1.toUpperCase()}</label><div><input type="text" class="form-control form-control-sm" id="referencia1" name="referencia1" required></div></div>` : '';
                    referencias += referencia2 && treferencia2 != null ? `<div class="form-group col-4" ><label class="col-form-label col-form-label-sm">${treferencia2.toUpperCase()}</label><div><input type="text" class="form-control form-control-sm" id="referencia2" name="referencia2" required></div></div>` : '';
                    referencias += referencia3 && treferencia3 != null ? `<div class="form-group col-4" ><label class="col-form-label col-form-label-sm">${treferencia3.toUpperCase()}</label><div><input type="text" class="form-control form-control-sm" id="referencia3" name="referencia3" required></div></div>` : '';
                    $('.referencias').html(referencias);
                });
            }
        }

        const validarSelect = () => {
            let isset = true;
            $('.serviciosseleccionados select').map((k, { value }) => {
                if (value == 0) {
                    isset = false;
                    return;
                }
            });
            return isset;
        }

        const existenServicios = () => {
            let isset = false;
            $('#frmServicios input').map((k, { checked }) => {
                if (checked) {
                    isset = checked;
                    return;
                }
            });
            return isset;
        }

        const SetFolio = tipoviaje => {
            switch (tipoviaje) {
                case 'VTNOW':
                    tipoviaje = tipoviaje.replace('NOW', '');
                    break;
                case 'VTNTW':
                    tipoviaje = tipoviaje.replace('NTW', '');
                    break;
                case 'VTNW':
                    tipoviaje = tipoviaje.replace('NW', '');
                    break;
                case 'VTNC':
                    tipoviaje = tipoviaje.replace('NC', '');
                    break;
                case 'VTI':
                    tipoviaje = tipoviaje.replace('T', '');
                    break;
                case 'VMM':
                    tipoviaje = tipoviaje.replace('MM', 'V');
                    break;
                default:
                    break;
            }

            $('#folio').text($('#folio').text().replace(/[a-zA-Z_]+/g, tipoviaje));
        }

        const initSelects = () => {
            $.get("/Clients/getClients", response => {
                response.map(({ id, nombreCorto, estatus }) => estatus === 1 ? $('#cliente').append(`<option value="${id}">${nombreCorto}</option>`) : null);
                dSelect('cliente');
            });

            //!isDemand && $('#fechasalida').val('');
            //if (isDemand && !isOffer) {
            //    setTimeout(() => {
            //        $('#cliente').val(ClientId).trigger('change');
            //        $('#tipounidad').val(RouteId).trigger('change');
            //        setTimeout(() => {
            //            $('#origen').val(OriginId).trigger('change');
            //            $('#destino').val(DesitnationId).trigger('change');
            //            $('#ruta').val(RouteId).trigger('change');
            //            GetRoutePrice(RouteId);
            //            $('#transportista').val(CarrierId).trigger('change');
            //            $('#addEquipo').click();
            //            setTimeout(() =>  $('[name=unidadterrestrenacional]').val(UnitId).trigger('change'), 1000);
            //        }, 800);
            //    }, 600);
            //}

            //if (isOffer) {
            //    setTimeout(() => {
            //        $('#transportista').val(CarrierId).trigger('change');
            //        $('#addEquipo').click();
            //        setTimeout(() => $('[name=unidadterrestrenacional]').val(UnitId).trigger('change'), 1000);
            //    }, 800);
            //}
        };

        function showModal(titulo = "Title", accion, type) {
            $('#frmOD').trigger("reset").attr('rel', type);
            $(".guardar").html(accion);
            $("#titulo-modal").empty("");
            $("#titulo-modal").html(titulo);
            $("#idEditar").val(idEditar);
            $("#modalOD").modal("show");
        }

    const closeModal = action => {
        $('#modalDiv').modal('hide');
        if (action == 'agregarciudad') {
            let jsonData = convertJson($("#frmAgregarCiudad"));
            $.post("/Catalogs/Geography/City/setCity", jsonData, response => {
                loadCity();
                $('#modalAgregarCiudad').modal('hide');
                dToast("success", "Registro actualizado exitosamente.", "Registrado");
                $(".guardar").attr("disabled", false);
                $('#frmAgregarCiudad')[0].reset();
            }).fail(error => {
                console.error(error);
                dToast("error", "Error al tratar de guardar el registro", "Error");
                $(".guardar").attr("disabled", false);
            });
        } else {
            const servicios = $('#frmServicios').serialize();
            if (servicios) {
                $.post("@Url.Action("ReturnServicios", "Travels")", { servicios: servicios }, response => {
                    $('.addServicios').hide();
                    $('.serviciosseleccionados').html(response).show('slow', () => { $('.serviciosseleccionados').show(), GetRoutePrice($('#ruta').val()); });
                });
            } else {
                $(`.addServicios`).show('slow', () => { $('.addServicios').show(); });
                $('.serviciosseleccionados').empty().hide();
            }
        }
        }

        const GetRoutePrice = RouteId => {
            RouteId && RouteId != "0" && (
                $.get('/Travels/GetRoutePrice', { RouteId: RouteId }, ({ minimo, maximo }) => {
                    minimo && maximo && $('.priceinfo').text(`$${parseFloat(minimo).toFixed(2)} - $${parseFloat(maximo).toFixed(2)}`), $('[name=terrestrenacionalprecio]').val(parseFloat(maximo).toFixed(2)), $('#preciocliente').html(`${parseFloat(maximo).toFixed(2)}`);

                })
            )
        }

        //Cargar unidades
        const loadUnits = () => {
            $.get("/Catalogs/TypesOfUnits/getUnidades", response => {
                $("#tipounidad").empty();
                $.each(response, function (item, key) {
                    key.estatus === 1 && $("#tipounidad").append(`<option value="${key.id}">${key.nombre}</option>`);
                });
                dSelect('tipounidad');
            }).fail(error => {
                console.error(error);
                dToast("error", "Error al obtener ciudades", "Atencion!");
            });
        }

    //Cargar ciudades
    const loadCity = () => {
        $.get("/Catalogs/Geography/City/getCity", response => {
            response.map(data => {
                const { id, nombre, estatus } = data;

                if (estatus === 1) {
                    catCiudad = [...catCiudad, data];
                    $("#origen, #destino").append(`<option value="${id}">${nombre}</option>`);
                }
            });
            dSelect('origen');
            dSelect('destino');
        }).fail(error => {
            console.error(error);
            dToast("error", "Error al obtener tipos de unidad", "Atencion!");
        });
    }

    //Cargar paises
    const loadCountry = () => {
        $.get("/Catalogs/Geography/Country/getCountry", response => {
            response.map(data => {
                const { id, pais, estatus } = data;
                if (estatus === 1) {
                    catPais = [...catPais, data];
                    $("#id_pais").append(`<option value="${id}">${pais}</option>`);
                }
            });
            dSelect('id_pais');
        }).fail(error => {
            console.error(error);
            dToast("error", "Error al obtener paises", "Atencion!");
        });
    }

    //Cargar estados
    const loadState = () => {
        $.get("/Catalogs/Geography/State/getState", response => {
            $("#id_estado").empty();
            response.map(data => {
                const { id, nombre, estatus } = data;
                if (estatus === 1) {
                    $("#id_estado").append(`<option value="${id}">${nombre}</option>`);
                }
            });
            dSelect('id_estado');
        }).fail(error => {
            console.error(error);
            dToast("error", "Error al obtener los estados", "Atencion!");
        });
    }

    const selectServicios = element =>  {
        $(element).attr('disabled', true);
        $("#modalDiv").modal("show");
        }


        const SetServicesFromDemand = () => {
            const servicios = 'terrestrenacional=on';
            $.post("@Url.Action("ReturnServicios", "Travels")", { servicios: servicios }, response => {
                $('.addServicios').hide();
                $('.serviciosseleccionados').html(response).show('slow', () => { $('.serviciosseleccionados').show(), GetRoutePrice($('#ruta').val()); });
            });
        }

        // OBTENER TRANSPORTISTA Y UNIDADES
        getServicios = (TramoId) => {
            $.get(`/Travels/GetServicios/${TramoId}`, response => {
                let services = '';
                let servicesids = '';
                Object.entries(response).map(([k, { id, nombre }]) => {
                    services += `${nombre}&`;
                    servicesids += `${id}&`;
                });

                SetServicios(services, response, servicesids);
            });
        }

        SetServicios = (servicios, servicesobject, servicesids) => {
            $('#modalDiv').modal('hide');
            servicios = servicios ? servicios : $('#frmServicios').serialize();
            if (servicios) {
                $.post("@Url.Action("ReturnServicios", "Travels")", { servicios: servicios, serviciosids: servicesids }, res => {
                    $('.addServicios').hide();
                    $('.serviciosseleccionados').html(res).show('slow', () => { $('.serviciosseleccionados').show(); });
                    setTimeout(() => {
                        servicesobject && servicesobject.map(({
                            id,
                            costo,
                            idAerolinea,
                            buque,
                            idAgenteAduanal,
                            idChofer,
                            idCoLoader,
                            idContatctoA,
                            idContactoAA,
                            idContactoCL,
                            idNaviera,
                            idTransportista,
                            nombre,
                            precio,
                            travelId,
                            unidades
                        }) => {
                            $(`[name=${nombre}`).prop('checked', true);
                            $(`[name=${nombre}costo`).val(parseFloat(costo).toFixed(2));
                            $(`[name=${nombre}precio`).val(parseFloat(precio).toFixed(2));
                            $('#transportista').val(idTransportista).trigger('change');
                            setTimeout(() => {
                                $('#chofer').val(idChofer).trigger('change');

                            }, 300);
                            $('.equipocontainer').attr('rel', idTransportista);
                            let equipos = [];
                            unidades.map(({
                                id,
                                idUnidad,
                                idEquipo,
                                services,
                                servicesId
                            }) => {
                                const elementid = $('.equipocontainer').children().length;
                                equipos.push([elementid, idEquipo]);
                                $('#addEquipo').attr('onclick', `addEquipo('${nombre}', this);`);
                                document.getElementById('addEquipo').click();
                                setTimeout(() => $(`#unidad${elementid}`).val(idUnidad).trigger('change'), 1500);
                            });
                            setTimeout(() => {
                                equipos.map(([k, v]) => $(`#equipo${k}`).val(v).trigger('change'));
                            }, 2800);
                        });
                        setPrecios();
                        setCostos();
                    }, 800);
                });
            } else {
                $(`.addServicios`).show('slow', () => { $('.addServicios').show(); });
                $('.serviciosseleccionados').empty().hide();
            }
        }
        //END OBTENER SERVICIOS
    </script>
}