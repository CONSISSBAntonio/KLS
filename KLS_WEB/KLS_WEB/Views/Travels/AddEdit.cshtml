@model KLS_WEB.Models.Travels.DTO.TravelDTO

<style>
    .card, .cshadow {
        box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 20%) !important;
    }

    .btn-dark {
        background-color: black !important;
    }

    .form-label {
        font-size: 12px;
        font-weight: bold;
    }

    select {
        text-transform: uppercase;
        width: 100% !important;
    }

    .selected {
        color: black;
        box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 20%) !important;
    }
</style>

<div class="p-4">
    <div class="d-flex justify-content-between mb-3">
        <div class="d-flex">
            @*<a href="/@(Model.Type.Contains("demand") ? "Demand" : Model.Type.Contains("offer") ? "Offer" : "Travels")" class="my-auto">
                    <div class="material-icons icon-red">arrow_back</div>
                </a>*@
            <a asp-controller="Travels" asp-action="Index" class="my-auto">
                <div class="material-icons icon-red">arrow_back</div>
            </a>
            <div class="text-uppercase poppins medium size-24 pl-2">@(Model.Travel.Id == 0 ? "Nuevo viaje" : string.Concat("Viaje", " ", Model.Travel.Folio))</div>
        </div>
    </div>
</div>

<div class="row pl-4 w-100">
    <div class="col-6">
        <div class="d-flex justify-content-around">
            <div class="my-auto">
                @*@{int id = Model.Travel.Id; }*@
                <h4 class="text-secondary size-14" id="folio">@Model.Travel.Folio</h4>
            </div>
            <div class="card text-center">
                <div class="card-body pb-0 size-12">
                    @{ decimal costo = 0; }
                    @foreach (var section in Model.Travel.Sections)
                    {
                        foreach (var service in section.Services)
                        {
                            costo += service.Costo;
                        }
                    }
                    <b>@costo.ToString("C") MXN</b>
                    <p class="text-light-grey">COSTO</p>
                </div>
            </div>
            <div class="card text-center">
                <div class="card-body pb-0 size-12">
                    @{ decimal venta = 0; }
                    @foreach (var section in Model.Travel.Sections)
                    {
                        if (!section.IsEmpty)
                        {
                            foreach (var service in section.Services)
                            {
                                venta += service.Precio;
                            }
                        }
                    }
                    <b>@venta.ToString("C") MXN</b>
                    <p class="text-light-grey">VENTA</p>
                </div>
            </div>
            <div class="card text-center">

                <div class="card-body pb-0 size-12">
                    @{ decimal vacios = 0; }
                    @foreach (var section in Model.Travel.Sections)
                    {
                        if (section.IsEmpty)
                        {
                            foreach (var service in section.Services)
                            {
                                vacios += service.Precio;
                            }
                        }
                    }
                    <b>@vacios.ToString("C") MXN</b>
                    <p class="text-light-grey">VACIOS</p>
                </div>
            </div>
        </div>
        <div class="card mt-3" style="height: 14.7rem;">
            <form asp-controller="Travels" asp-action="AddEditTravel" method="post">
                <input asp-for="Travel.Id" type="hidden" />
                <div class="row">
                    <div class="col-6 pl-4 pt-3">
                        <label asp-for="Travel.TravelServiceId" class="form-label">TIPO DE SERVICIO</label>
                        <select asp-for="Travel.TravelServiceId" asp-items="Model.Selects.TravelServices" class="form-select" style="width: 100%" required></select>
                        <span asp-validation-for="Travel.TravelServiceId" class="text-danger"></span>
                    </div>
                    <div class="col-6 pt-3 pr-4">
                        <label asp-for="Travel.Ejecutivo" class="form-label">EJECUTIVO</label>
                        <input asp-for="Travel.Ejecutivo" type="text" class="form-control form-control-sm">
                    </div>
                    <div class="col-6 pl-4 pt-3 pb-4">
                        <label asp-for="Travel.GrupoMonitor" class="form-label">GRUPO MONITOR</label>
                        <input asp-for="Travel.GrupoMonitor" type="text" class="form-control form-control-sm">
                    </div>
                </div>
                <div class="pb-3 pl-2">
                    <button type="submit" id="guardar" class="btn btn-dark" style="width: 12.8rem;" onclick="dToast('success', 'Información actualizada', 'ACTUALIZADO')">GUARDAR VIAJE</button>
                </div>
            </form>
        </div>
    </div>

    <div class="col-6">
        <div class="d-flex justify-content-between mb-2" style="height: 3rem;">
            <b class="my-auto size-12">ADMINISTRACIÓN DE TRAMOS</b>
            @if (Model.Travel.Id > 0)
            {
                <button class="btn btn-dark cshadow" onclick="GetSection(this, 0)"><span class="material-icons">add</span></button>
            }
        </div>
        <div style="height: 17rem; overflow-y: scroll; overflow-x: unset;">
            <table class="table table-striped table-bordered display table-hover text-uppercase" width="100%">
                <thead>
                    <tr>
                        <th>TRAMO</th>
                        <th>COSTO</th>
                        <th>VENTA</th>
                        <th>CLIENTE</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Travel.Sections.Any())
                    {
                        foreach (var tramo in Model.Travel.Sections)
                        {
                            <tr>
                                <td><a href="javascript:void(0)" onclick="GetSection(this, @tramo.Id)">@tramo.Folio</a></td>
                                <td>@(tramo.Services.Any() ? tramo.Services.Sum(x => x.Costo).ToString("C") : 0.ToString("C"))</td>
                                <td>@(tramo.Services.Any() ? tramo.Services.Sum(x => x.Precio).ToString("C") : 0.ToString("C"))</td>
                                <td>@(tramo.IsEmpty ? "-" : tramo.Clients.NombreCorto)</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="text-center" colspan="4">AGREGA UN TRAMO PARA COMENZAR</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="sk-cube-grid text-center">
    <div class="sk-cube sk-cube1"></div>
    <div class="sk-cube sk-cube2"></div>
    <div class="sk-cube sk-cube3"></div>
    <div class="sk-cube sk-cube4"></div>
    <div class="sk-cube sk-cube5"></div>
    <div class="sk-cube sk-cube6"></div>
    <div class="sk-cube sk-cube7"></div>
    <div class="sk-cube sk-cube8"></div>
    <div class="sk-cube sk-cube9"></div>
</div>

<div id="traveldetails-container" rel="5" class="row w-100 pl-4" style="display: none;">
    <div class="catalog-list w-100 pl-3 d-flex justify-content-around">
        <a href="javascript:void(0);" class="catalog selected" id="servicios" onclick="ShowPanel(this.id)">
            <div class="content">
                <span class="material-icons">
                    travel_explore
                </span>
                <div class="name font-barlow">Servicios</div>
            </div>
        </a>
        <a href="javascript:void(0);" class="catalog" id="requisitos" onclick="ShowPanel(this.id)">
            <div class="content" id="requisitos">
                <span class="material-icons">
                    checklist
                </span>
                <div class="name font-barlow">Requisitos</div>
            </div>
        </a>
        <a href="javascript:void(0);" class="catalog" id="mercancia" onclick="ShowPanel(this.id)">
            <div class="content">
                <span class="material-icons">
                    inventory_2
                </span>
                <div class="name font-barlow">Mercancía</div>
            </div>
        </a>

        <a href="javascript:void(0);" class="catalog" id="facturacion" onclick="ShowPanel(this.id)">
            <div class="content">
                <span class="material-icons">
                    receipt_long
                </span>
                <div class="name font-barlow">Facturación</div>
            </div>
        </a>
        @*<a href="javascript:void(0);" class="catalog" id="documentos" onclick="ShowPanel(this.id)">
                <div class="content">
                    <span class="material-icons">
                        folder
                    </span>
                    <div class="name font-barlow">Documentos</div>
                </div>
            </a>*@
        <a href="javascript:void(0);" class="catalog" id="historial" onclick="ShowPanel(this.id)">
            <div class="content">
                <span class="material-icons">
                    manage_search
                </span>
                <div class="name font-barlow">Historial</div>
            </div>
        </a>
        @*<a href="javascript:void(0);" class="catalog" id="historial" onclick="ShowPanel(this.id)">
                <div class="content">
                    <span class="material-icons">
                        pin_drop
                    </span>
                    <div class="name font-barlow">Monitoreo</div>
                </div>
            </a>*@
    </div>
</div>

<div id="panelcontainer" class="row w-100 pl-4 mt-3 col-12">
</div>

<div id="sectioncontainer" class="row w-100 pl-4 mt-3">
</div>

<div class="row mt-3 w-100 pl-4">
    <div class="col-12 py-3" style="display: none;" id="addservicescontainer">
        <div class="card col-12 py-3">
            <div class="form-group col-12 d-flex justify-content-between">
                <h6 class="font-weight-bold">Servicios</h6>
                <a class="btn btn-sm cshadow" onclick="$('#modalDiv').modal('show')">
                    <i class="material-icons">add</i>
                </a>
            </div>
            <div class="form-group col-12 addServicios">
                <div class="border rounded d-flex justify-content-center align-items-center font-weight-bolder" onclick="$('#modalDiv').modal('show')" style="border: 5px dashed #585858 !important; height: 7rem; opacity: 0.2; cursor: pointer;">
                    <h3>AGREGA SERVICIOS</h3>
                </div>
            </div>

            <div id="servicescontainer" class="col-12" style="display: none;"></div>
        </div>
    </div>
</div>

<!--Modal global-->
<div class="modal fade" id="modalDiv" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false"
     aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titulo-modal">AGREGAR</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-left">
                <form id="servicesform" onsubmit="event.preventDefault(), GetServices(this)">
                    <div class="form-check d-flex align-items-center">
                        <input class="form-check-input my-auto" type="checkbox" id="0" name="terrestrenacional">
                        <label class="form-check-label" for="0">Terrestre nacional</label>
                    </div>
                    @*<div class="form-check">
                            <input class="form-check-input" type="checkbox" id="1" name="naviera">
                            <label class="form-check-label" for="1">
                                Naviera
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="2" name="agenteaduanal">
                            <label class="form-check-label" for="2">
                                Agente aduanal
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="3"
                                   name="terrestreinternacional">
                            <label class="form-check-label" for="3">
                                Terrestre Internacional
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="4" name="aerolinea">
                            <label class="form-check-label" for="4">
                                Aerolinea
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="5" name="coloaders">
                            <label class="form-check-label" for="5">
                                Coloaders
                            </label>
                        </div>*@
                    <br />
                    <button id="btn-getservices" type="submit" class="btn btn-dark" style="width:100%;">
                        Agregar
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--Modal AGREGAR ORIGEN-DESTINO-->
<div class="modal fade" id="modalOD" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titulo-modal"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-left">
                <form id="frmOD" action="#" method="post">
                    <input type="hidden" name="id" id="idEditar" value="0" />
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Nombre</label>
                                <input type="text" class="form-control" name="Nombre" id="Nombre" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">CP</label>
                                <input type="number" class="form-control" name="Cp" id="Cp" required />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Estado</label>
                                <select class="form-control form-control-sm" style="width:100%;" name="Id_Estado" id="Id_Estado" onchange="setCiudad(this.value);">
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Ciudad</label>
                                <select class="form-control form-control-sm" style="width:100%;" name="Id_Ciudad" id="Id_Ciudad" onchange="setColonias(this.value);">
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Colonia</label>
                                <select class="form-control form-control-sm" style="width:100%;" name="Id_Colonia" id="Id_Colonia" onchange="setCp(this.value);">
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="">Dirección</label>
                                <input type="text" class="form-control" name="Direccion" id="Direccion" required />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="">Hora de atención</label>
                                <input type="time" class="form-control" name="HoraAtencion" id="HoraAtencion" required />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="">Estatus</label>
                            <select class="form-control form-control-sm" name="Estatus" id="Estatus">
                                <option value="1">Activo</option>
                                <option value="2">Inactivo</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-dark guardar" style="width:22%;" id="btnAccion">
                        Guardar
                    </button>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Cerrar</button>
                @*<button type="button" class="btn btn-primary">Save changes</button>*@
            </div>
        </div>
    </div>
</div>
<!--Modal AGREGAR ORIGEN-DESTINO-->
<!-- modal confirm delete-->
<div class="modal fade" id="popup" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titulo-modal">CONFIRMAR ACCIÓN</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-left">
                <p class="text-uppercase">¿Estas seguro de que deseas eliminar el SERVICIO seleccionado?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Cerrar</button>
                <button id="confirm" type="button" class="btn">Si</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="popupdeletesection" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">CONFIRMAR ACCIÓN</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-left">
                <p class="text-uppercase">¿Estas seguro de que deseas eliminar el tramo seleccionado?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Cerrar</button>
                <button id="btn-deletesection" type="button" class="btn">Si</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        let _SectionIsEmpty = false;
        let _CustomerId = 0;
        $(() => {
            // CÓDIGO AGREGAR ORIGEN DESTINO MODAL
            loadState();
            loadCountry();
            loadUnits();
            getCatalogos();

            $("#frmOD").submit(function (event) {
                event.preventDefault();
                const type = $(this).attr('rel') == 'destino' ? 'Destinations/setDestino' : 'Origins/setOrigen';
                var jsonData = convertJson($("#frmOD"));
                jsonData["Id_Cliente"] = $('#Section_ClientesId').val();
                if (jsonData["Id_Cliente"] == 0) {
                    dToast("error", "DEBES SELECCIONAR UN CLIENTE PARA AGREGAR ORIGENES/DESTINOS", "Error");
                    return;
                }
                if (parseInt($("#Id_Ciudad").val()) != 0 && parseInt($("#Id_Estado").val()) != 0 && parseInt($("#Id_Colonia").val()) != 0) {
                    $.post(`/Clients/${type}`, jsonData, function (res) {
                        dToast("success", "Registro guardado exitosamente.", "Registrado");
                        $(".guardar").attr("disabled", false);
                        $('#frmOD').trigger("reset");
                        $('#Section_ClientesId').val(jsonData["Id_Cliente"]).trigger('change');
                    }).fail(function (error) {
                        dToast("error", "Error al tratar de guardar el registro", "Error");
                        $(".guardar").attr("disabled", false);
                    });
                } else {
                    dToast("error", "Selecciona una opción", "Error");
                }
            });
            // END CODIGO AGREGAR ORIGEN DESTINO
            dSelect('Travel_TravelServiceId');
        });

        const GetSection = async (b, SectionId) => {
            //SectionId === 0 && $('#traveldetails-container, #panelcontainer').hide();
            $('.sk-cube-grid').show();
            $('#sectioncontainer, #addservicescontainer, #traveldetails-container, #panelcontainer').hide();
            b.disabled = true;
            SectionId === 0 && ($('#servicescontainer').empty(), $('.addServicios').show());
            $('#traveldetails-container').attr('rel', SectionId);
            try {
                const response = await fetch(`/Travels/GetSection?SectionId=${SectionId}`);
                const data = await response.text();
                $('#sectioncontainer').html(data).show();
                $('#addservicescontainer').show();
                SectionId > 0 && $('#traveldetails-container').show();
                $('.sk-cube-grid').hide();
            } catch (e) {
                console.error(e);
            }
            b.disabled = false;
        }

        const GetCustomerOD = async CustomerId => {
            try {
                const response = await fetch(`/Travels/GetCustomerOD?CustomerId=${CustomerId}`);
                const { origins, destinations } = await response.json();
                let originshtml = `<option value="0" disabled selected>${origins.length > 0 ? 'SELECCIONA' : 'SIN RESULTADOS'}</option>`;
                let destinationshtml = `<option value="0" disabled selected>${destinations.length > 0 ? 'SELECCIONA' : 'SIN RESULTADOS'}</option>`;

                origins && origins.map(({ id, nombre }) => {
                    originshtml += `<option value="${id}">${nombre}</option>`;
                });
                destinations && destinations.map(({ id, nombre }) => {
                    destinationshtml += `<option value="${id}">${nombre}</option>`;
                });
                $('#Section_Cl_Has_OrigenId').html(originshtml);
                $('#Section_Cl_Has_DestinosId').html(destinationshtml);
            } catch (e) {
                console.error(e);
            }
        }

        const GetClientReferences = async ClientId => {
            try {
                const response = await fetch(`/Travels/GetClientReferences?ClientId=${ClientId}`);
                const data = await response.json();
                if (!data) {
                    dToast("warning", 'El cliente seleccionado no tiene parámetros para "OTROS".', "Atencion!");
                    $('#referencia1, #referencia2, #referencia3').hide();
                    $('#Section_Referencia1, #Section_Referencia2, #Section_Referencia3').prop('disabled', true);
                    return;
                }
                const {
                    referencia1,
                    referencia2,
                    referencia3,
                    treferencia1,
                    treferencia2,
                    treferencia3
                } = data;
                referencia1 ? ($('[for="Section_Referencia1"]').html(treferencia1.toUpperCase()), $('#referencia1').show(), $('#referencia1 input').prop('disabled', false)) : ($('#referencia1').hide(), $('#Section_Referencia1').prop('disabled', true));
                referencia2 ? ($('[for="Section_Referencia2"]').html(treferencia2.toUpperCase()), $('#referencia2').show(), $('#referencia2 input').prop('disabled', false)) : ($('#referencia2').hide(), $('#Section_Referencia2').prop('disabled', true));
                referencia3 ? ($('[for="Section_Referencia3"]').html(treferencia3.toUpperCase()), $('#referencia3').show(), $('#referencia3 input').prop('disabled', false)) : ($('#referencia3').hide(), $('#Section_Referencia3').prop('disabled', true));
                //let referencias = ``;
                //referencias += referencia1 ? `<div class="col-4" ><label class="form-label">${treferencia1.toUpperCase()}</label><input type="text" class="form-control" id="referencia1" name="referencia1" required></div>` : '';
                //referencias += referencia2 ? `<div class="col-4" ><label class="form-label">${treferencia2.toUpperCase()}</label><input type="text" class="form-control" id="referencia2" name="referencia2" required></div>` : '';
                //referencias += referencia3 ? `<div class="col-4" ><label class="form-label">${treferencia3.toUpperCase()}</label><input type="text" class="form-control" id="referencia3" name="referencia3" required></div>` : '';
                //$('.referencias').html(referencias);
            } catch (e) {
                console.error(e);
            }
        }

        const GetRoute = async (Id, Type) => {
            const OriginId = $('#Section_Cl_Has_OrigenId').val() ? parseInt($('#Section_Cl_Has_OrigenId').val()) : 0;
            const DestinationId = $('#Section_Cl_Has_DestinosId').val() ? parseInt($('#Section_Cl_Has_DestinosId').val()) : 0;

            try {
                const response = await fetch(`/Travels/GetAddress?Type=${Type}&Id=${Type === 'origin' ? OriginId : DestinationId}`);
                const data = await response.json();
                const selector = Type === 'origin' ? '#Section_Cl_Has_Origen_Direccion' : '#Section_Cl_Has_Destinos_Direccion';
                $(selector).val(data);
            } catch (e) {
                console.error(e);
            }

            if (OriginId != 0 && DestinationId != 0) {
                const params = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ OriginId: OriginId, DestinationId: DestinationId })
                };

                try {
                    const response = await fetch('/Travels/GetRoute', params);
                    const data = await response.json();
                    data && data.length > 0 ? (data.map(({ id, od }) => $('#Section_RutaId').empty().append(`<option value="${id}" selected>${od}</option>`)
                    ), GetRoutePrice(data[0].id)) : ($("#Section_RutaId").empty().append(`<option value="0" selected disabled>No se encontraron rutas</option>`));
                } catch (e) {
                    console.error(e);
                }
            }
        }

        const AddEditSection = async (b, f) => {
            //console.log([...f]);
            //[...f].map(e => console.log(e, $(e).is(':disabled')));
            const isEmpty = $('#Section_IsEmpty').prop('checked');
            if (!isEmpty) {
                if (!validateForm('#sectionform')) {
                    dToast("error", "TODOS LOS CAMPOS SON OBLIGATORIOS", "Error");
                    return;
                }
            }

            if ($('#servicesform').serializeArray().length === 0) {
                dToast('error', 'Los servicios son obligatorios', 'Error');
                return;
            }

            let service = {};

            $('#servicesform').serializeArray().map(({ name }) => {
                $(`.${name}-form`).map((k, form) => {
                    service = { ...service, ...Object.fromEntries(new FormData(form)) };
                });
            });

            const invalidServices = Object.entries(service).some(([k, v]) => {
                if (v === '' || v == 0) {
                    return true;
                }
                return false;
            });

            if (invalidServices) {
                dToast('error', 'Los parámetros de servicios son obligatorios', 'Error');
                return;
            }


            let units = [];
            $('.formunit').map((k, v) => {
                units = [...units, Object.fromEntries([...new FormData(v)])];
            });
            service = { ...service, units };

            if (service['units'].length === 0) {
                dToast('error', 'Las unidades de servicios son obligatorias', 'Error');
                return;
            } else {
                const invalidUnit = service['units'].some(({ typeid, unitid }) => {
                    if (typeid == 0 || unitid == 0) {
                        return true;
                    }
                    return false;
                });
                if (invalidUnit) {
                    dToast('error', 'Las unidades de servicios son obligatorias', 'Error');
                    return;
                }
            }

            b.disabled = true;

            const newservice = {
                method: 'POST',
                body: new FormData(f)
            };

            try {
                const response = await fetch('/Travels/AddEditSection', newservice);
                if (!response.ok) {
                    dToast("error", "OCURRIÓ UN ERROR AL PROCESAR LA SOLICITUD", "Error");
                    return;
                }

                const params = {
                    method: 'POST',
                    headers: {
                        'Content-type': 'application/json; charset=utf-8'
                    },
                    body: JSON.stringify(service)
                };

                try {
                    const response = await fetch('/Travels/AddServices', params);
                    response.ok && dToast("success", "REGISTRO GUARDADO", "Registrado"), setTimeout(() => location.reload(), 1000);
                } catch (e) {
                    console.error(e);
                    dToast("error", "OCURRIÓ UN ERROR AL PROCESAR LA SOLICITUD", "Error");
                }
            } catch (e) {
                console.error(e);
                dToast("error", "OCURRIÓ UN ERROR AL PROCESAR LA SOLICITUD", "Error");
            }
            b.disabled = false;
        }

        const validateForm = (form) => {
            let isSet = true;
            $(`${form} select, ${form} input`).map((k, e) => {
                const { value } = e;
                if ($(e).prop('disabled')) {
                    return;
                }
                if (!value || value == 0) {
                    isSet = value === 0 && false;
                    isSet = value === 'cerrado' && true;
                    return;
                }
            });
            return isSet;
        }

        const GetServices = async f => {
            const data = new FormData(f);
            let services = [];
            [...data].map(([k, v]) => {
                services = [...services, k];
            });

            const params = {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({ Services: services })
            };

            $('#modalDiv').modal('hide');
            try {
                const resposne = await fetch('/Travels/GetServices', params);
                const data = await resposne.text();
                $('#servicescontainer').html(data).show();
                $('.addServicios').hide();
                GetRoutePrice($('#Section_RutaId').val());
            } catch (e) {
                console.error(e);
            }
        }

        const getOperadores = async (idtransportista, service) => {
            const idselected = $('.equipocontainer').attr('rel');
            idselected != idtransportista && $('.equipocontainer select').parent().remove();
            try {
                const response = await fetch(`/Travels/GetDrivers?CarrierId=${idtransportista}`);
                const data = await response.json();
                $(`#chofer-${service}`).empty();
                $(`#chofer-${service}`).append(`<option value="0" selected>SELECCIONA UN CHOFER</option>`)
                data.length > 0 ? data.map(({ id, nombre, estatus }) => estatus === 1 ? $(`#chofer-${service}`).append(`<option value="${id}">${nombre}</option>`) : null) : $(`#chofer-${service}`).append(`<option value="0">SIN OPERADORES ACTIVOS</option>`);
                dSelect(`chofer-${service}`);
            } catch (e) {
                console.error(e);
            }
        }

        const getOperador = async idoperador => {
            try {
                const response = await fetch(`/Carriers/Operators/GetOperator/${idoperador}`);
                const { noLicencia, noTelefono, imss } = await response.json();
                $('#nolicencia').text(noLicencia);
                $('#notelefono').text(noTelefono);
                $('#noimss').text(imss);
            } catch (e) {
                console.error(e);
            }
        }

        const addEquipo = (servicio, element) => {
            const boton = jQuery(element);
            const idtransportista = $(`#carrier-${servicio}`).val();
            const elementid = $('.equipocontainer').children().length;
            $('.equipocontainer').attr('rel', idtransportista);
            boton.remove();
            const equipo = `<div class="d-flex justify-content-between equipo mt-2">
                            <form class="formunit ${servicio} row w-100">
                                <input id="${servicio}-unit" type="hidden" name="id" value="-1" >
                                <select id="unidad${elementid}" class="form-control form-control-sm col-4 selectunidad" name="typeid" required onchange="{selectEquipo(${idtransportista}, this.value, ${elementid});}">
                                </select>
                                <div class="col-8 d-flex flex-row justify-content-between">
                                    <select id="equipo${elementid}" class="form-control form-control-sm col-10 selectequipo" name="unitid" required>
                                    </select>
                                    <i id="unit-${servicio}-${elementid}" class="material-icons text-danger" style="cursor: pointer;" onClick="DeleteUnit(this, 0)">delete</i>
                                </div>
                            </form>
                        </div>
                        <i id="addEquipo" class="material-icons" style="cursor:pointer;" onclick="addEquipo('${servicio}', this);">add_box</i>`;
            $('.equipocontainer').append(equipo);
            getInventario(idtransportista, elementid);
        }

        const getInventario = async (IdTransportista, elementId) => {
            try {
                const response = await fetch(`/Carriers/Inventory/GetEquipos/${IdTransportista}`);
                const { unidades } = await response.json();
                if (unidades.length > 0) {
                    $(`#unidad${elementId}`).append(`<option value="0">SELECCIONA UNA UNIDAD</option>`);
                    unidades.map(({ tipoUnidad, nombre }) => {
                        $(`#unidad${elementId}`).append(`<option value="${tipoUnidad}">${nombre[0]}</option>`);
                    });
                    selectEquipo(IdTransportista, unidades[0].tipoUnidad, elementId);
                } else {
                    $('.selectunidad').append(`<option value="0">No existen unidades activas</option>`);
                    $('.selectequipo').append(`<option value="0">No existen equipos activos</option>`);
                }
            } catch (e) {
                console.error(e);
            }
        }

        const selectEquipo = async (IdTransportista, IdTipoUnidad, selectid) => {
            try {
                const response = await fetch(`/Carriers/Inventory/GetEquipos/${IdTransportista}`);
                const { dataReport } = await response.json();
                const equipos = dataReport.filter(x => x.tipoUnidad == IdTipoUnidad);
                $(`#equipo${selectid}`).empty();
                $(`#equipo${selectid}`).append(`<option value="0">SELECCIONA UN EQUIPO</option>"`)
                if (equipos.length > 0) {
                    equipos.map(({ id, marca, modelo, placa }) => {
                        $(`#equipo${selectid}`).append(`<option value="${id}">${marca}, ${modelo}. PLACA: ${placa}</option>"`);
                    });
                } else {
                    $(`#equipo${selectid}`).append(`<option value="0">No existen unidades activas</option>"`);
                }
            } catch (e) {
                console.error(e);
            }
        }

        const downloadChofer = (element, ChoferSelector) => {
            const idchofer = $(`#${ChoferSelector}`).val();
            if (idchofer == 0) {
                dToast("error", "NO HAY UN CHOFER SELECCIONADO", "Error");
            } else {
                const a = $("<a>")
                    .attr("href", "/Carriers/Operators/DescargarZip/" + idchofer)
                    .appendTo("body");
                a[0].click();
                a.remove();
            }
        }

        const ConfirmDeleteSection = (SectionId) => {
            $('#btn-deletesection').attr('onClick', `DeleteSection(${SectionId});`);
            $('#popupdeletesection').modal('show');
        }

        const confirmDelete = (service, serviceid) => {
            $('#confirm').attr('onClick', `removeService('${service}', ${serviceid});`);
            $('#popup').modal('show');
        }

        const DeleteSection = async SectionId => {
            try {
                const response = await fetch(`/Travels/DeleteSection?SectionId=${SectionId}`);
                $('#popupdeletesection').modal('hide');
                response.ok && dToast("success", "Tramo eliminado", "Eliminado"), setTimeout(() => location.reload(), 1000);
            } catch (e) {
                console.error(e);
            }

        }

        const removeService = async (service, serviceid) => {
            if (serviceid > 0) {
                try {
                    const response = await fetch(`/Travels/DeleteService?ServiceId=${serviceid}`);
                    if (response.ok) {
                        $(`#${service}-container`).hide('slow', () => {
                            $('#popup').modal('hide');
                            $(`#${service}-container`).remove();
                            $(`[name=${service}]`).prop('checked', false);
                            $('#servicescontainer').children().length === 0 ? ($(`.addServicios`).show('slow', () => { $('.addServicios').show(); }), $('#frmServicios input').prop('checked', false)) : null;
                        });
                    }
                } catch (e) {
                    console.error(e);
                }
            } else {
                $(`#${service}-container`).hide('slow', () => {
                    $('#popup').modal('hide');
                    $(`#${service}-container`).remove();
                    $(`[name=${service}]`).prop('checked', false);
                    $('#servicescontainer').children().length === 0 ? ($(`.addServicios`).show('slow', () => { $('.addServicios').show(); }), $('#frmServicios input').prop('checked', false)) : null;
                });
            }
        }

        const DeleteUnit = async (e, UnitId) => {
            if (UnitId > 0) {
                try {
                    const response = await fetch(`/Travels/DeleteUnit?UnitId=${UnitId}`);
                    response.ok && dToast("success", "Registro eliminado", "Eliminado");
                } catch (e) {
                    console.error(e);
                }
            }
            $(e).parent().parent().remove();
        }

        const GetKLSRoutes = async RouteId => {
            try {
                const response = await fetch('/Travels/GetKLSRoutes');
                const data = await response.json();
                let routes = '<option value="0" selected>SELECCIONA</option>';
                data.map(({ id, od }) => routes += `<option value="${id}" ${RouteId == id && 'selected'}>${od}</option>`);
                $('#Section_RutaId').html(routes);
            } catch (e) {
                console.error();
            }
        }

        // PANELES
        const ShowPanel = async Panel => {
            $('.catalog').removeClass('selected');
            $(`#${Panel}`).addClass('selected');
            if (Panel === 'servicios') {
                $('#sectioncontainer, #addservicescontainer').show();
                $('#panelcontainer').hide();
                return;
            } else {
                $('#sectioncontainer, #addservicescontainer').hide();
                $('#panelcontainer').show();
            }

            const SectionId = $('#traveldetails-container').attr('rel');

            try {
                const response = await fetch(`/Travels/GetPanel?Panel=${Panel}&SectionId=${SectionId}`);
                const data = await response.text();
                $('#panelcontainer').html(data);
            } catch (e) {
                console.log(e);
            }
        }
        // END PANELES

        const PostWare = async f => {
            try {
                const params = {
                    method: 'POST',
                    body: new FormData(f)
                };
                const response = await fetch('/Travels/PostWare', params);
                response.ok && dToast("success", "Descripción actualizada", "Hecho");
            } catch (e) {
                console.error(e);
            }
        }

        const GetRoutePrice = async RouteId => {
            const response = await fetch(`/Travels/GetRoutePrice?RouteId=${RouteId}`);
            const { precioMinimo, precioMaximo } = await response.json();
            precioMinimo && precioMaximo && $('.priceinfo-terrestrenacional').text(`${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(parseFloat(precioMinimo))} - ${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(parseFloat(precioMaximo))}`);
        }

        // CÓDIGO AGREGAR ORIGENES DESTINOS MODAL
        let dataCity = [];
        let catPais = [];
        let catEstado = [];
        let catCiudad = [];
        let dataOrigenes = [];
        let dataState = [];
        let dataColonies = [];

        function showModal(titulo = "Title", accion, type) {
            $('#frmOD').trigger("reset").attr('rel', type);
            $(".guardar").html(accion);
            $("#titulo-modal").empty("");
            $("#titulo-modal").html(titulo);
            $("#idEditar").val(idEditar);
            $("#modalOD").modal("show");
        }

        //Cargar unidades
        const loadUnits = () => {
            $.get("/Catalogs/TypesOfUnits/getUnidades", response => {
                $("#tipounidad").empty();
                $.each(response, function (item, key) {
                    key.estatus === 1 && $("#tipounidad").append(`<option value="${key.id}">${key.nombre}</option>`);
                });
                dSelect('tipounidad');
            }).fail(error => {
                console.error(error);
                dToast("error", "Error al obtener ciudades", "Atencion!");
            });
        }
        //Cargar ciudades
        const loadCity = () => {
            $.get("/Catalogs/Geography/City/getCity", response => {
                response.map(data => {
                    const { id, nombre, estatus } = data;
                    if (estatus === 1) {
                        catCiudad = [...catCiudad, data];
                        $("#origen, #destino").append(`<option value="${id}">${nombre}</option>`);
                    }
                });
                dSelect('origen');
                dSelect('destino');
            }).fail(error => {
                console.error(error);
                dToast("error", "Error al obtener tipos de unidad", "Atencion!");
            });
        }
        //Cargar paises
        const loadCountry = () => {
            $.get("/Catalogs/Geography/Country/getCountry", response => {
                response.map(data => {
                    const { id, pais, estatus } = data;
                    if (estatus === 1) {
                        catPais = [...catPais, data];
                        $("#id_pais").append(`<option value="${id}">${pais}</option>`);
                    }
                });
                dSelect('id_pais');
            }).fail(error => {
                console.error(error);
                dToast("error", "Error al obtener paises", "Atencion!");
            });
        }
        //Cargar estados
        const loadState = () => {
            $.get("/Catalogs/Geography/State/getState", response => {
                $("#id_estado").empty();
                response.map(data => {
                    const { id, nombre, estatus } = data;
                    if (estatus === 1) {
                        $("#id_estado").append(`<option value="${id}">${nombre}</option>`);
                    }
                });
                dSelect('id_estado');
            }).fail(error => {
                console.error(error);
                dToast("error", "Error al obtener los estados", "Atencion!");
            });
        }
        //Catalogos
        function getCatalogos() {
            $.get("/Catalogs/Geography/State/getState", function (res) {
                dataState = res;
                $("#Id_Estado").empty();
                $("#Id_Estado").append(`<option value="0" selected disabled>Selecciona una opción</option>`);
                $.each(dataState, function (item, key) {
                    if (parseInt(key.estatus) == 1) {
                        $("#Id_Estado").append(`<option value="${key.id}">${key.nombre}</option>`);
                    };
                });
            }).fail(function (error) {
                dToast("error", "Error al tratar de obtener los registros, intenta cerrar sesión y volver a iniciar.", "Error");
            });
            $.get("/Catalogs/Geography/City/getCity", function (res) {
                dataCity = res;
            }).fail(function (error) {
                dToast("error", "Error al tratar de obtener los registros, intenta cerrar sesión y volver a iniciar.", "Error");
            });
            $.get("/Catalogs/Geography/Colonies/getColonies", function (res) {
                dataColonies = res;
            }).fail(function (error) {
                dToast("error", "Error al tratar de obtener los registros, intenta cerrar sesión y volver a iniciar.", "Error");
            });
        }
        function searcCP() {
            var codigoP = $("#Cp").val();
            $.each(dataColonies, function (item, key) {
                if (parseInt(key.estatus) == 1 && parseInt(key.cp) == parseInt(codigoP)) {
                    $('#Id_Estado option[value="' + key.id_estado + '"]').attr("selected", true);
                    setCiudad(key.id_estado);
                    $("#Id_Estado").change();
                    $('#Id_Ciudad option[value="' + key.id_ciudad + '"]').attr("selected", true);
                    $("#Id_Ciudad").change();
                    setColonias(key.id_ciudad);
                    $("#Id_Colonia").change();
                };
            });
        }
        function setCp(id) {
            let indice = dataColonies.findIndex(service => service.id == id);
            if (parseInt(id) != 0) {
                if (parseInt(indice) >= 0) {
                    $("#Cp").val(dataColonies[indice].cp);
                } else {
                    $("#Cp").val("");
                    dToast("info", "No se encontro ninguna colonia", "Atención");
                }
            }
        }
        function setColonias(id) {
            $("#Id_Colonia").empty();
            $("#Id_Colonia").append(`<option value="0" selected disabled>Selecciona una opción</option>`);
            $.each(dataColonies, function (item, key) {
                if (parseInt(key.estatus) == 1 && parseInt(id) == parseInt(key.id_ciudad)) {
                    $("#Id_Colonia").append(`<option value="${key.id}">${key.nombre}</option>`);
                };
            });
        }
        function setCiudad(id) {
            $("#Id_Ciudad").empty();
            $("#Id_Ciudad").append(`<option value="0" selected disabled>Selecciona una opción</option>`);
            $.each(dataCity, function (item, key) {
                if (parseInt(key.estatus) == 1 && parseInt(id) == parseInt(key.id_estado)) {
                    $("#Id_Ciudad").append(`<option value="${key.id}">${key.nombre}</option>`);
                };
            });
        }
                    //END CÓDIGO AGREGAR ORIGENES DESTINOS
    </script>
}
