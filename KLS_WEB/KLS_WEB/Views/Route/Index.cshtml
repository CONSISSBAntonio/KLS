@{
    ViewData["Title"] = "Rutas";
}
<style>
    .details {
        background: #207EEC 0% 0% no-repeat padding-box;
        opacity: 1;
        color: white;
    }
</style>

<div class="p-4 body">
    <div class="text-left mb-3">
        <div class="text-uppercase poppins medium size-24 pl-2">Rutas</div>
    </div>

    <div class="p-4 shadow bg-white">
        <table id="table" class="table table-striped table-bordered display table-hover table-rutas" width="100%">
            <thead class="text-uppercase">
                <tr>
                    <th>ID</th>
                    <th>Estado Or</th>
                    <th>Ciudad Or</th>
                    <th>Estado De</th>
                    <th>Ciudad De</th>
                    <th>Kilómetros</th>
                    <th>Seguridad</th>
                    <th>Estatus</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>


@section Scripts {
    <script>
        var dataCity = [];
        var dataCheckpoint = [];
        var catCiudad = [];
        var catEstado = [];
        var rutaid = 0;

        $(document).ready(function () {
            loadCity();
            loadState();
            setTimeout(() => loadTable(), 1000);
            FormatMoney();
        });

        const FormatMoney = () => {
            const minimo = $('#fpreciominimo').val();
            const maximo = $('#fpreciomaximo').val();
            $('#fpreciominimo').val(parseMoney(minimo));
            $('#fpreciomaximo').val(parseMoney(maximo));
        }

        const parseMoney = val => {
            val = !isNaN(val - parseFloat(val)) ? parseFloat(val) : 0;

            const money = new Intl.NumberFormat('es-MX',
                { style: 'currency', currency: 'MXN' }
            ).format(val);

            return money;
        }

        function AddEdit(id, button) {
            const boton = jQuery(button);
            boton.attr('disabled', true);
            $.get(`Route/AddEdit/${id}`, function (res) {
                boton.attr('disabled', false);
                $('.body').html(res);
            }).fail(function (error) {
                dToast("error", "Error al obtener paises", "Atencion!");
            });
        }

        //Cargar ciudades
        function loadCity() {
            $.get("/Catalogs/Geography/City/getCity", function (res) {
                res.map(data => {
                    const { estatus } = data;

                    if (estatus === 1) {
                        catCiudad = [...catCiudad, data];
                    }
                });

            }).fail(function (error) {
                dToast("error", "Error al obtener paises", "Atencion!");
            });
        }

        //Cargar estados
        function loadState() {
            $.get("/Catalogs/Geography/State/getState", function (res) {
                catEstado = res;
            }).fail(function (error) {
                dToast("error", "Error al obtener paises", "Atencion!");
            });
        }

        const loadTable = () => {
            DT = $('#table').DataTable({
                destroy: true,
                responsive: true,
                autoWidth: true,
                //dom: 'Btp',
                ajax: {
                    url: '/Route/getRoute',
                    dataSrc: ''
                },
                columns: [
                    { data: 'folio' },
                    { data: 'estadoOrigen' },
                    { data: 'ciudadOrigen' },
                    { data: 'estadoDestino' },
                    { data: 'ciudadDestino' },
                    { data: 'km' },
                    {
                        data: 'seguridad',
                        render: (seguridad, type, full, meta) => {
                            const color = seguridad == 'Alto' ? 'success' : seguridad == 'Medio' ? 'warning' : 'danger';
                            return `<span class="font-weight-bold text-${color}">${seguridad}</span>`;
                        }
                    },
                    { data: 'estatus' },
                    {
                        render: (data, type, row) => {
                            const { id, folio } = row;
                            return `<button type="button" class="btn btn-sm" onclick="AddEdit(${id}, this);" style="background-color: #ffffff00;">
                                        <span class="material-icons details">
                                            search
                                        </span>
                                    </button>`
                        }
                    }
                ],
                language: {
                    url: '/json/dt-es.json'
                },
                columnDefs: [
                    { className: 'text-center', targets: [5, 6, 7, 8] }
                ],
                initComplete: () => {

                    $('#table_length').html(`
                                <button onclick="AddEdit(0, this);" class="btn btn-sm btn-outline-secondary float-right">
                                    <span class="material-icons">
                                        add
                                    </span>
                                </button>`).show();
                }
            })
        }

    </script>
} 