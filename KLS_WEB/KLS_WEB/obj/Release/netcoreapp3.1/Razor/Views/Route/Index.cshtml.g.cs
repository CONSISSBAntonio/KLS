#pragma checksum "C:\Users\Consiss\source\repos\KLS\KLS_WEB\KLS_WEB\Views\Route\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6024e297fcb729f3f9ec4d3df526888cc53466ff"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Route_Index), @"mvc.1.0.view", @"/Views/Route/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Consiss\source\repos\KLS\KLS_WEB\KLS_WEB\Views\_ViewImports.cshtml"
using KLS_WEB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Consiss\source\repos\KLS\KLS_WEB\KLS_WEB\Views\_ViewImports.cshtml"
using KLS_WEB.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6024e297fcb729f3f9ec4d3df526888cc53466ff", @"/Views/Route/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d093829c613a0b3ec7efe9551a2b52f04eb20fc7", @"/Views/_ViewImports.cshtml")]
    public class Views_Route_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Consiss\source\repos\KLS\KLS_WEB\KLS_WEB\Views\Route\Index.cshtml"
  
    ViewData["Title"] = "Rutas";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
    .details {
        background: #207EEC 0% 0% no-repeat padding-box;
        opacity: 1;
        color: white;
    }
</style>

<div class=""p-4 body"">
    <div class=""text-left mb-3"">
        <div class=""text-uppercase poppins medium size-24 pl-2"">Rutas</div>
    </div>

    <div class=""p-4 shadow bg-white"">
        <table id=""table"" class=""table table-striped table-bordered display table-hover table-rutas"" width=""100%"">
            <thead class=""text-uppercase"">
                <tr>
                    <th>ID</th>
                    <th>Estado Or</th>
                    <th>Ciudad Or</th>
                    <th>Estado De</th>
                    <th>Ciudad De</th>
                    <th>Tiempo de ruta</th>
                    <th>Kilómetros</th>
                    <th>Seguridad</th>
                    <th></th>
                    <th>Estatus</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id=""table-info""><");
            WriteLiteral("/tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>

        var dataCity = [];
        var dataCheckpoint = [];
        var catCiudad = [];
        var catEstado = [];
        var rutaid = 0;

        $(document).ready(function () {
            loadCity();
            loadState();
        });

        function AddEdit(id, button) {
            const boton = jQuery(button);
            boton.attr('disabled', true);
            $.get(`Route/AddEdit/${id}`, function (res) {
                boton.attr('disabled', false);
                $('.body').html(res);
            }).fail(function (error) {
                dToast(""error"", ""Error al obtener paises"", ""Atencion!"");
            });
        }

        //Cargar ciudades
        function loadCity() {
            $.get(""/Catalogs/Geography/City/getCity"", function (res) {
                res.map(data => {
                    const { estatus } = data;

                    if (estatus === 1) {
                        catCiudad = [...catCiudad, data];
                    }");
                WriteLiteral(@"
                });

            }).fail(function (error) {
                dToast(""error"", ""Error al obtener paises"", ""Atencion!"");
            });
        }

        //Cargar estados
        function loadState() {
            $.get(""/Catalogs/Geography/State/getState"", function (res) {
                catEstado = res;
                loadTable();
            }).fail(function (error) {
                dToast(""error"", ""Error al obtener paises"", ""Atencion!"");
            });
        }

        function loadTable() {
            var stable = $('.table-rutas').DataTable();
            stable.destroy();
            $(""#table-info"").empty();
            $.get(""Route/getRoute"", function (res) {
                dataCity = res;
                $.each(res, (item, key) => {
                    let indice_co = catCiudad.findIndex(service => service.id === key.id_ciudadorigen);
                    let indice_cd = catCiudad.findIndex(service => service.id === key.id_ciudaddestino);
            ");
                WriteLiteral(@"        let indice_eo = catEstado.findIndex(service => service.id === key.id_estadoorigen);
                    let indice_ed = catEstado.findIndex(service => service.id === key.id_estadodestino);
                    const tipoviajeabreviado = nCon(key.tipodeviaje) == 'One Way' ? '1W' : nCon(key.tipodeviaje) == 'Two Way' ? '2W' : 'C';
                    const color = nCon(key.seguridad) == 'Alto' ? 'success' : nCon(key.seguridad) == 'Medio' ? 'warning' : 'danger';
                    const status = nCon(key.estatus) == 1 ? 'Activo' : 'Inactivo';
                    $(""#table-info"").append(`
                                <tr class=""text-uppercase"">
                                <td>${nCon(key.id)}</td>
                                <td>${catEstado[indice_eo].nombre}</td>
                                <td>${catCiudad[indice_co].nombre}</td>
                                <td>${catEstado[indice_ed].nombre}</td>
                                <td>${catCiudad[indice_cd].nombre}</td>
        ");
                WriteLiteral(@"                        <td>${nCon(key.totalhoras)}</td>
                                <td>${nCon(key.totalkilometros)} km</td>
                                <td class=""font-weight-bold text-${color}"">${nCon(key.seguridad)}</td>
                                <td class=""text-center"">${tipoviajeabreviado}</td>
                                <td class=""text-center"">${status}</td>
                                <td class=""text-center"">
                                    <button type=""button"" class=""btn btn-sm"" onclick=""AddEdit(${nCon(key.id)}, this);"" style=""background-color: #ffffff00;"">
                                        <span class=""material-icons details"">
                                            search
                                        </span>
                                    </button>
                                </td>
                                </tr>`);
                });
                dTable(""table-rutas"");
                $('#table_length').html(`
    ");
                WriteLiteral(@"                <button onclick=""AddEdit();"" class=""btn btn-sm btn-outline-secondary float-right"">
                        <span class=""material-icons"">
                            add
                        </span>
                    </button>`).show();
            }).fail(function (error) {
                dToast(""error"", ""Error al tratar de obtener los registros, intenta cerrar sesión y volver a iniciar."", ""Error"");
            });
        }
    </script>
");
            }
            );
            WriteLiteral(" ");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
